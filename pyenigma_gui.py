# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'pyenigma.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import pickle
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import qdarktheme

class Ui_MainWindow(object):
	def setupUi(self, MainWindow):
		MainWindow.setObjectName("MainWindow")
		MainWindow.resize(800, 600)
		MainWindow.setMinimumSize(800, 600)
		MainWindow.setMaximumSize(800, 600)

		self.centralwidget = QtWidgets.QWidget(MainWindow)
		self.centralwidget.setObjectName("centralwidget")
		self.pyenigma_label = QtWidgets.QLabel(self.centralwidget)
		self.pyenigma_label.setGeometry(QtCore.QRect(330, 10, 150, 41))
		self.pyenigma_label.setStyleSheet("font: 75  bold 22pt \"Ubuntu\";")
		self.pyenigma_label.setObjectName("pyenigma_label")
		self.output_text = QtWidgets.QTextBrowser(self.centralwidget)
		self.output_text.setGeometry(QtCore.QRect(490, 80, 301, 441))
		self.output_text.setObjectName("output_text")
		self.input_text = QtWidgets.QTextEdit(self.centralwidget)
		self.input_text.setGeometry(QtCore.QRect(10, 80, 301, 441))
		self.input_text.setObjectName("input_text")
		self.run_btn = QtWidgets.QPushButton(self.centralwidget)
		self.run_btn.setGeometry(QtCore.QRect(700, 540, 89, 25))
		self.run_btn.setObjectName("run_btn")
		self.input_label = QtWidgets.QLabel(self.centralwidget)
		self.input_label.setGeometry(QtCore.QRect(120, 50, 67, 17))
		self.input_label.setStyleSheet("font: 75 bold 12pt \"Ubuntu\";")
		self.input_label.setObjectName("input_label")
		self.output_label = QtWidgets.QLabel(self.centralwidget)
		self.output_label.setGeometry(QtCore.QRect(600, 50, 67, 17))
		self.output_label.setStyleSheet("font: 75 bold 12pt \"Ubuntu\";")
		self.output_label.setObjectName("output_label")
		MainWindow.setCentralWidget(self.centralwidget)
		self.menubar = QtWidgets.QMenuBar(MainWindow)
		self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
		self.menubar.setObjectName("menubar")
		self.menuFile = QtWidgets.QMenu(self.menubar)
		self.menuFile.setObjectName("menuFile")
		MainWindow.setMenuBar(self.menubar)
		self.actionOpen = QtWidgets.QAction(MainWindow)
		self.actionOpen.setObjectName("actionOpen")
		self.menuFile.addAction(self.actionOpen)
		self.menubar.addAction(self.menuFile.menuAction())

		self.retranslateUi(MainWindow)
		QtCore.QMetaObject.connectSlotsByName(MainWindow)
		self.run_btn.clicked.connect(self.run)
	
		#intialize the alpha and symbols
		self.alpha = "abcdefghijklmnopqrstuvwxyz"
		self.symbols = "'?!@#$%^&*():><{}-,_.\\"
		self.escape_chars = ["\n","\t","\r"]

		#load rotors config
		self.load_rotors_config()
	
	#show a warning messagebox
	def show_warning_messagebox(self):
		self.msg = QtWidgets.QMessageBox()
		self.msg.setIcon(QtWidgets.QMessageBox.Warning)
  	
		# setting message for Message Box
		self.msg.setText("please run enigma_rotors_configure.py first")
		  
		# setting Message box window title
		self.msg.setWindowTitle("PyEnigma Warning Message")
		  
		# declaring buttons on Message Box
		self.msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
		  
		# start the app
		retval = self.msg.exec_()


	#load the rotors data.
	def load_rotors_config(self):
		#load the rotors data from enigma_rotors_configuration.enigma file.
		try:
			self.econfig = open("enigma_rotors_configuration.enigma", 'rb')
			self.rotor1, self.rotor2, self.rotor3 = pickle.load(self.econfig)

		#show a warning message if the enigma_rotors_configuration file doesn't exist.
		except:
			self.show_warning_messagebox()
			sys.exit()
			
		
	#reflect every single character. example => a : z, b : y 
	def reflector(self, c):
	   reflected = self.alpha[(26-self.alpha.find(c))-1]
	   return reflected
	   
	   
	#rotate the rotors
	def rotate_rotors(self):
		self.rotor1 = self.rotor1[1:] + self.rotor1[0]
		if self.state >= 26:
			self.rotor2 = self.rotor2[1:] + self.rotor2[0]
		if self.state >= (26 * 26):
			self.rotor3 = self.rotor3[1:] + self.rotor3[0]
	
	
	
	#enigma code and decode
	def enigma(self, plain):
		self.cipher = ""
		self.state = 0

		for ch in plain:
			#ignore the symbols.
			if ch in self.symbols:
			    self.cipher += ch
			    continue

			#ignore the whitespaces.
			if ch == " ":
			    self.cipher += " "
			    continue
				
			#ignore the escape characters like \n \t \r.
			if ch in self.escape_chars:
			    self.cipher += ch
			    continue

			#enigma code and decode operation.
			c1 = self.rotor1[self.alpha.find(ch)]
			c2 = self.rotor2[self.alpha.find(c1)]
			c3 = self.rotor3[self.alpha.find(c2)]
			c3 = self.alpha[self.rotor3.find(self.reflector(c3))]
			c2 = self.alpha[self.rotor2.find(c3)]
			c1 = self.alpha[self.rotor1.find(c2)]
				
			self.cipher += c1
				
			self.state += 1
			self.rotate_rotors()        
			
		return self.cipher
	

	#run code/decode function		
	def run(self):
		self.load_rotors_config()
		self.intext = self.input_text.toPlainText()
		self.outext = self.enigma(self.intext)
		self.output_text.setText(self.outext)
		
			
	def retranslateUi(self, MainWindow):
		_translate = QtCore.QCoreApplication.translate
		MainWindow.setWindowTitle(_translate("MainWindow", "PyEnigma"))
		self.pyenigma_label.setText(_translate("MainWindow", "PyEnigma"))
		self.run_btn.setText(_translate("MainWindow", "RUN"))
		self.input_label.setText(_translate("MainWindow", "Input"))
		self.output_label.setText(_translate("MainWindow", "Output"))
		self.menuFile.setTitle(_translate("MainWindow", "File"))
		self.actionOpen.setText(_translate("MainWindow", "Open"))
        
if __name__ == "__main__":
	app = QtWidgets.QApplication(sys.argv)
	pyenigma_app = QtWidgets.QMainWindow()
	qdarktheme.setup_theme("dark")
	ui = Ui_MainWindow()
	ui.setupUi(pyenigma_app)
	pyenigma_app.show()
	sys.exit(app.exec_())
